generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDUCATOR
  STUDENT
  PARENT
}

enum LessonExceptionType {
  CANCELLED
  RESCHEDULED
}

enum BookingRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum WaitlistPriority {
  LOW
  MEDIUM
  HIGH
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  PAUSED
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
}

enum PaymentMethodType {
  CARD
  BANK
}

enum DiscountType {
  AMOUNT
  PERCENT
}

enum CalendarProvider {
  GOOGLE
  APPLE
  MICROSOFT
}

/// RLS: Applications must filter results by studioId using tenant-aware Prisma middleware.
model Studio {
  id          String          @id @default(uuid())
  name        String
  subdomain   String          @unique
  timeZone    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  members     User[]
  instruments Instrument[]
  rooms       Room[]
  lessons     Lesson[]
  bookingRequests BookingRequest[]
  waitlist    WaitlistEntry[]
  assignments Assignment[]
  assignmentTemplates AssignmentTemplate[]
  practiceLogs PracticeLog[]
  practiceGoals PracticeGoal[]
  pieces      Piece[]
  annotations Annotation[]
  recordings  Recording[]
  calendarConnections CalendarConnection[]
  videoSessions VideoSession[]
  notifications Notification[]
  consents    Consent[]
  audits      AuditLog[]
  subscriptions Subscription[]
  invoices    Invoice[]
  paymentMethods PaymentMethod[]
  coupons     Coupon[]
  invites     StudioInvite[]
  users       StudioMember[]
}

/// Users are scoped to a studio via studioId and share tenant RLS requirements.
model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  passwordHash        String?
  firstName           String
  lastName            String
  role                UserRole
  studioId            String
  instrumentId        String?
  oauthProvider       String?
  oauthSubject        String?
  totpSecret          String?
  totpEnabled         Boolean         @default(false)
  hashedRefreshToken  String?
  inviteId            String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  studio              Studio          @relation(fields: [studioId], references: [id])
  instrument          Instrument?     @relation(fields: [instrumentId], references: [id])
  assignments         Assignment[]    @relation("AssignmentAssignedTo")
  assignedAssignments Assignment[]    @relation("AssignmentAssignedBy")
  submissions         Submission[]
  grades              Grade[]         @relation("GradeGradedBy")
  practiceLogs        PracticeLog[]
  practiceGoals       PracticeGoal[]
  calendarConnections CalendarConnection[]
  notifications       Notification[]
  consents            Consent[]
  audits              AuditLog[]      @relation("AuditActor")
  paymentMethods      PaymentMethod[]
  bookings            BookingRequest[]
  waitlistEntries     WaitlistEntry[]
  studioInvite        StudioInvite?   @relation(fields: [inviteId], references: [id])

  @@index([studioId])
  @@index([role])
}

model StudioMember {
  id        String   @id @default(uuid())
  studioId  String
  userId    String
  role      UserRole
  instrumentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  instrument Instrument? @relation(fields: [instrumentId], references: [id])

  @@unique([studioId, userId])
  @@index([studioId, role])
}

model StudioInvite {
  id         String   @id @default(uuid())
  studioId   String
  email      String
  role       UserRole
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  studio     Studio   @relation(fields: [studioId], references: [id])
  users      User[]

  @@index([studioId])
}

model Instrument {
  id        String   @id @default(uuid())
  studioId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  users     User[]
  members   StudioMember[]
  practiceLogs PracticeLog[]

  @@unique([studioId, name])
  @@index([studioId])
}

model Room {
  id        String   @id @default(uuid())
  studioId  String
  name      String
  capacity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  lessons   Lesson[]

  @@unique([studioId, name])
  @@index([studioId])
}

model AvailabilityBlock {
  id        String   @id @default(uuid())
  studioId  String
  educatorId String
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime
  recurrenceRule String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  educator  User     @relation(fields: [educatorId], references: [id])

  @@index([studioId])
  @@index([educatorId])
}

model Lesson {
  id           String   @id @default(uuid())
  studioId     String
  title        String
  description  String?
  educatorId   String
  studentId    String
  roomId       String?
  recurrenceRule String?
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studio       Studio   @relation(fields: [studioId], references: [id])
  educator     User     @relation("LessonEducator", fields: [educatorId], references: [id])
  student      User     @relation("LessonStudent", fields: [studentId], references: [id])
  room         Room?    @relation(fields: [roomId], references: [id])
  occurrences  LessonOccurrence[]
  exceptions   LessonException[]
  assignments  Assignment[]
  videoSessions VideoSession[]
  bookingRequests BookingRequest[]
  waitlistEntries WaitlistEntry[]

  @@index([studioId])
  @@index([educatorId])
  @@index([studentId])
}

model LessonOccurrence {
  id        String   @id @default(uuid())
  lessonId  String
  startTime DateTime
  endTime   DateTime
  isCancelled Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  @@index([lessonId])
}

model LessonException {
  id        String   @id @default(uuid())
  lessonId  String
  date      DateTime
  type      LessonExceptionType
  note      String?
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([lessonId, date])
}

model BookingRequest {
  id          String   @id @default(uuid())
  studioId    String
  studentId   String
  lessonId    String?
  status      BookingRequestStatus @default(PENDING)
  requestedAt DateTime @default(now())
  studio      Studio   @relation(fields: [studioId], references: [id])
  student     User     @relation(fields: [studentId], references: [id])
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])

  @@index([studioId])
  @@index([studentId])
}

model WaitlistEntry {
  id        String   @id @default(uuid())
  studioId  String
  studentId String
  lessonId  String?
  priority  WaitlistPriority @default(MEDIUM)
  createdAt DateTime @default(now())
  studio    Studio   @relation(fields: [studioId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])

  @@index([studioId])
  @@index([studentId])
}

model AssignmentTemplate {
  id          String   @id @default(uuid())
  studioId    String
  title       String
  description String?
  rubricId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studio      Studio   @relation(fields: [studioId], references: [id])
  rubric      Rubric?  @relation(fields: [rubricId], references: [id])
  assignments Assignment[]

  @@index([studioId])
}

model Assignment {
  id            String   @id @default(uuid())
  studioId      String
  templateId    String?
  lessonId      String?
  assignedById  String
  assignedToId  String
  title         String
  instructions  String?
  dueDate       DateTime?
  status        String  @default("assigned")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  studio        Studio   @relation(fields: [studioId], references: [id])
  template      AssignmentTemplate? @relation(fields: [templateId], references: [id])
  lesson        Lesson?  @relation(fields: [lessonId], references: [id])
  assignedBy    User     @relation("AssignmentAssignedBy", fields: [assignedById], references: [id])
  assignedTo    User     @relation("AssignmentAssignedTo", fields: [assignedToId], references: [id])
  submissions   Submission[]
  annotations   Annotation[]

  @@index([studioId])
  @@index([assignedToId])
}

model Submission {
  id            String   @id @default(uuid())
  assignmentId  String
  submittedById String
  content       String?
  submittedAt   DateTime @default(now())
  studioId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  submittedBy   User       @relation(fields: [submittedById], references: [id])
  grade         Grade?
  recordings    Recording[]
  studio        Studio     @relation(fields: [studioId], references: [id])

  @@index([assignmentId])
  @@index([studioId])
}

model Rubric {
  id        String   @id @default(uuid())
  studioId  String
  title     String
  criteria  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  assignments AssignmentTemplate[]
  grades    Grade[]

  @@index([studioId])
}

model Grade {
  id           String   @id @default(uuid())
  submissionId String   @unique
  gradedById   String
  score        Float
  feedback     String?
  studioId     String
  rubricId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  submission   Submission @relation(fields: [submissionId], references: [id])
  gradedBy     User       @relation("GradeGradedBy", fields: [gradedById], references: [id])
  studio       Studio     @relation(fields: [studioId], references: [id])
  rubric       Rubric?    @relation(fields: [rubricId], references: [id])

  @@index([studioId])
  @@index([gradedById])
}

model PracticeGoal {
  id            String   @id @default(uuid())
  studioId      String
  studentId     String
  title         String
  description   String?
  targetMinutes Int
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  studio        Studio   @relation(fields: [studioId], references: [id])
  student       User     @relation(fields: [studentId], references: [id])
  practiceLogs  PracticeLog[]

  @@index([studioId])
  @@index([studentId])
}

model Piece {
  id        String   @id @default(uuid())
  studioId  String
  title     String
  composer  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  practiceLogs PracticeLog[]
  annotations Annotation[]

  @@index([studioId])
  @@unique([studioId, title])
}

model PracticeLog {
  id             String   @id @default(uuid())
  studioId       String
  studentId      String
  pieceId        String?
  instrumentId   String?
  practiceGoalId String?
  durationMinutes Int
  notes          String?
  practicedAt    DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  studio         Studio   @relation(fields: [studioId], references: [id])
  student        User     @relation(fields: [studentId], references: [id])
  piece          Piece?   @relation(fields: [pieceId], references: [id])
  instrument     Instrument? @relation(fields: [instrumentId], references: [id])
  practiceGoal   PracticeGoal? @relation(fields: [practiceGoalId], references: [id])
  recordings     Recording[]
  annotations    Annotation[]

  @@index([studioId])
  @@index([studentId])
}

model Annotation {
  id           String   @id @default(uuid())
  studioId     String
  assignmentId String?
  practiceLogId String?
  pieceId      String?
  authorId     String?
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studio       Studio   @relation(fields: [studioId], references: [id])
  assignment   Assignment?  @relation(fields: [assignmentId], references: [id])
  practiceLog  PracticeLog? @relation(fields: [practiceLogId], references: [id])
  piece        Piece?       @relation(fields: [pieceId], references: [id])
  author       User?        @relation(fields: [authorId], references: [id])

  @@index([studioId])
}

model Recording {
  id            String   @id @default(uuid())
  studioId      String
  practiceLogId String?
  submissionId  String?
  url           String
  transcript    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  studio        Studio      @relation(fields: [studioId], references: [id])
  practiceLog   PracticeLog? @relation(fields: [practiceLogId], references: [id])
  submission    Submission?  @relation(fields: [submissionId], references: [id])

  @@index([studioId])
}

model CalendarConnection {
  id            String   @id @default(uuid())
  studioId      String
  userId        String
  provider      CalendarProvider
  externalId    String
  accessToken   String
  refreshToken  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  studio        Studio   @relation(fields: [studioId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
  @@index([studioId])
}

model VideoSession {
  id         String   @id @default(uuid())
  studioId   String
  lessonId   String?
  status     String   @default("scheduled")
  joinUrl    String
  startedAt  DateTime?
  endedAt    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  studio     Studio   @relation(fields: [studioId], references: [id])
  lesson     Lesson?  @relation(fields: [lessonId], references: [id])

  @@index([studioId])
}

model Notification {
  id        String   @id @default(uuid())
  studioId  String
  userId    String
  type      String
  payload   Json
  readAt    DateTime?
  createdAt DateTime @default(now())
  studio    Studio   @relation(fields: [studioId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([studioId])
  @@index([userId, readAt])
}

model Consent {
  id        String   @id @default(uuid())
  studioId  String
  userId    String
  type      String
  grantedAt DateTime
  revokedAt DateTime?
  metadata  Json?
  createdAt DateTime @default(now())
  studio    Studio   @relation(fields: [studioId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([studioId, userId, type])
  @@index([studioId])
}

model AuditLog {
  id         String   @id @default(uuid())
  studioId   String
  actorId    String?
  action     String
  targetType String
  targetId   String?
  metadata   Json?
  createdAt  DateTime @default(now())
  studio     Studio   @relation(fields: [studioId], references: [id])
  actor      User?    @relation("AuditActor", fields: [actorId], references: [id])

  @@index([studioId])
  @@index([actorId])
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  priceCents  Int
  billingInterval String
  features    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String   @id @default(uuid())
  studioId    String
  planId      String
  status      SubscriptionStatus @default(ACTIVE)
  startedAt   DateTime @default(now())
  endsAt      DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studio      Studio   @relation(fields: [studioId], references: [id])
  plan        Plan     @relation(fields: [planId], references: [id])
  invoices    Invoice[]

  @@index([studioId])
}

model Invoice {
  id             String   @id @default(uuid())
  studioId       String
  subscriptionId String
  amountCents    Int
  status         InvoiceStatus @default(DRAFT)
  issuedAt       DateTime @default(now())
  dueAt          DateTime?
  paidAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  studio         Studio   @relation(fields: [studioId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([studioId])
}

model PaymentMethod {
  id        String   @id @default(uuid())
  studioId  String
  userId    String?
  type      PaymentMethodType
  brand     String?
  last4     String?
  expMonth  Int?
  expYear   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([studioId])
}

model Coupon {
  id          String   @id @default(uuid())
  studioId    String
  code        String
  description String?
  discountType DiscountType
  amountOffCents Int?
  percentOff  Float?
  active      Boolean @default(true)
  validFrom   DateTime?
  validUntil  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studio      Studio   @relation(fields: [studioId], references: [id])

  @@unique([studioId, code])
  @@index([studioId])
}

/// Seed script should populate demo data with weekly recurring lessons and practice logs.
*** End of File
