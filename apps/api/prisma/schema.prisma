generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDUCATOR
  STUDENT
  PARENT
}

enum LessonExceptionType {
  CANCELLED
  RESCHEDULED
}

enum BookingRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum WaitlistPriority {
  LOW
  MEDIUM
  HIGH
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  PAUSED
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
}

enum PaymentMethodType {
  CARD
  BANK
}

enum PracticeCategory {
  WARMUP
  REPERTOIRE
  TECHNIQUE
}

enum DiscountType {
  AMOUNT
  PERCENT
}

enum CalendarProvider {
  GOOGLE
  APPLE
  MICROSOFT
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
}

enum NotificationTemplateType {
  BOOKING_CONFIRMATION
  BOOKING_RESCHEDULE_PROPOSAL
  BOOKING_CANCELLATION
  ASSIGNMENT_CREATED
  SUBMISSION_FEEDBACK
  PRACTICE_STREAK
}

enum NotificationJobStatus {
  PENDING
  QUEUED
  SENT
  FAILED
  CANCELLED
}

/// RLS: Applications must filter results by studioId using tenant-aware Prisma middleware.
model Studio {
  id          String          @id @default(uuid())
  /// @pii organization
  name        String
  subdomain   String          @unique
  timeZone    String
  locale      String?         @default("en")
  bookingPolicy Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  members     User[]
  instruments Instrument[]
  rooms       Room[]
  lessons     Lesson[]
  bookingRequests BookingRequest[]
  waitlist    WaitlistEntry[]
  assignments Assignment[]
  assignmentTemplates AssignmentTemplate[]
  rubrics     Rubric[]
  practiceLogs PracticeLog[]
  practiceGoals PracticeGoal[]
  pieces      Piece[]
  annotations Annotation[]
  recordings  Recording[]
  calendarConnections CalendarConnection[]
  videoSessions VideoSession[]
  notifications Notification[]
  notificationPreferences NotificationPreference[]
  notificationSubscriptions NotificationSubscription[]
  notificationJobs NotificationJob[]
  consents    Consent[]
  audits      AuditLog[]
  dataRequests DataRequest[]
  subscriptions Subscription[]
  invoices    Invoice[]
  paymentMethods PaymentMethod[]
  coupons     Coupon[]
  invites     StudioInvite[]
  users       StudioMember[]
  availabilityBlocks AvailabilityBlock[]
  submissions Submission[]
  grades      Grade[]
}

/// Users are scoped to a studio via studioId and share tenant RLS requirements.
model User {
  id                  String          @id @default(uuid())
  /// @pii email
  email               String          @unique
  /// @pii auth_secret
  passwordHash        String?
  /// @pii name
  firstName           String
  /// @pii name
  lastName            String
  role                UserRole
  studioId            String
  instrumentId        String?
  oauthProvider       String?
  oauthSubject        String?
  totpSecret          String?
  totpEnabled         Boolean         @default(false)
  hashedRefreshToken  String?
  inviteId            String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  studio              Studio          @relation(fields: [studioId], references: [id])
  instrument          Instrument?     @relation(fields: [instrumentId], references: [id])
  assignedAssignments Assignment[]    @relation("AssignmentAssignedBy")
  assignmentRecipients AssignmentRecipient[]
  availabilityBlocks AvailabilityBlock[]
  lessonsTeaching Lesson[] @relation("LessonEducator")
  lessonsLearning Lesson[] @relation("LessonStudent")
  submissions         Submission[]
  grades              Grade[]         @relation("GradeGradedBy")
  practiceLogs        PracticeLog[]
  practiceGoals       PracticeGoal[]
  annotationsAuthored Annotation[]    @relation("AnnotationAuthor")
  calendarConnections CalendarConnection[]
  notifications       Notification[]
  consents            Consent[]       @relation("ConsentSubject")
  consentsGranted     Consent[]       @relation("ConsentGrantedBy")
  audits              AuditLog[]      @relation("AuditActor")
  paymentMethods      PaymentMethod[]
  bookings            BookingRequest[]
  waitlistEntries     WaitlistEntry[]
  studioInvite        StudioInvite?   @relation(fields: [inviteId], references: [id])
  studioMemberships   StudioMember[]
  notificationPreferences NotificationPreference[]
  notificationSubscriptions NotificationSubscription[]
  notificationJobs NotificationJob[]
  dataRequests        DataRequest[]   @relation("DataRequestSubject")
  dataRequestsRequested DataRequest[] @relation("DataRequestActor")

  @@index([studioId])
  @@index([role])
}

model StudioMember {
  id        String   @id @default(uuid())
  studioId  String
  userId    String
  role      UserRole
  instrumentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  instrument Instrument? @relation(fields: [instrumentId], references: [id])

  @@unique([studioId, userId])
  @@index([studioId, role])
}

model StudioInvite {
  id         String   @id @default(uuid())
  studioId   String
  /// @pii email
  email      String
  role       UserRole
  /// @pii auth_token
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  studio     Studio   @relation(fields: [studioId], references: [id])
  users      User[]

  @@index([studioId])
}

model Instrument {
  id        String   @id @default(uuid())
  studioId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  users     User[]
  members   StudioMember[]
  practiceLogs PracticeLog[]

  @@unique([studioId, name])
  @@index([studioId])
}

model Room {
  id        String   @id @default(uuid())
  studioId  String
  name      String
  capacity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  lessons   Lesson[]

  @@unique([studioId, name])
  @@index([studioId])
}

model AvailabilityBlock {
  id        String   @id @default(uuid())
  studioId  String
  educatorId String
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime
  recurrenceRule String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  educator  User     @relation(fields: [educatorId], references: [id])

  @@index([studioId])
  @@index([educatorId])
}

model Lesson {
  id           String   @id @default(uuid())
  studioId     String
  title        String
  description  String?
  educatorId   String
  studentId    String
  roomId       String?
  recurrenceRule String?
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studio       Studio   @relation(fields: [studioId], references: [id])
  educator     User     @relation("LessonEducator", fields: [educatorId], references: [id])
  student      User     @relation("LessonStudent", fields: [studentId], references: [id])
  room         Room?    @relation(fields: [roomId], references: [id])
  occurrences  LessonOccurrence[]
  exceptions   LessonException[]
  assignments  Assignment[]
  videoSessions VideoSession[]
  bookingRequests BookingRequest[]
  waitlistEntries WaitlistEntry[]

  @@index([studioId])
  @@index([educatorId])
  @@index([studentId])
}

model LessonOccurrence {
  id        String   @id @default(uuid())
  lessonId  String
  startTime DateTime
  endTime   DateTime
  isCancelled Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  @@index([lessonId])
}

model LessonException {
  id        String   @id @default(uuid())
  lessonId  String
  date      DateTime
  type      LessonExceptionType
  note      String?
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([lessonId, date])
}

model BookingRequest {
  id          String   @id @default(uuid())
  studioId    String
  studentId   String
  lessonId    String?
  status      BookingRequestStatus @default(PENDING)
  requestedAt DateTime @default(now())
  studio      Studio   @relation(fields: [studioId], references: [id])
  student     User     @relation(fields: [studentId], references: [id])
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])

  @@index([studioId])
  @@index([studentId])
}

model WaitlistEntry {
  id        String   @id @default(uuid())
  studioId  String
  studentId String
  lessonId  String?
  priority  WaitlistPriority @default(MEDIUM)
  createdAt DateTime @default(now())
  studio    Studio   @relation(fields: [studioId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])

  @@index([studioId])
  @@index([studentId])
}

enum SubmissionStatus {
  SUBMITTED
  RETURNED
  GRADED
}

enum GradeResult {
  PASS
  FAIL
}

enum GradeType {
  NUMERIC
  PASS_FAIL
}

model AssignmentTemplate {
  id          String   @id @default(uuid())
  studioId    String
  title       String
  description String?
  rubricId    String?
  sections    Json
  tags        Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  studio      Studio    @relation(fields: [studioId], references: [id])
  rubric      Rubric?   @relation(fields: [rubricId], references: [id])
  assignments Assignment[]

  @@index([studioId])
}

model Assignment {
  id            String   @id @default(uuid())
  studioId      String
  templateId    String?
  lessonId      String?
  assignedById  String
  title         String
  instructions  String?
  dueDate       DateTime?
  status        String   @default("assigned")
  rubricId      String?
  ensembleId    String?
  autoReminders Int[]   @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  studio        Studio   @relation(fields: [studioId], references: [id])
  template      AssignmentTemplate? @relation(fields: [templateId], references: [id])
  lesson        Lesson?  @relation(fields: [lessonId], references: [id])
  assignedBy    User     @relation("AssignmentAssignedBy", fields: [assignedById], references: [id])
  recipients    AssignmentRecipient[]
  rubric        Rubric?  @relation(fields: [rubricId], references: [id])
  submissions   Submission[]
  annotations   Annotation[]
  practiceLogs  PracticeLog[]

  @@index([studioId])
  @@index([ensembleId])
}

model AssignmentRecipient {
  id           String   @id @default(uuid())
  assignmentId String
  userId       String
  createdAt    DateTime @default(now())
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([assignmentId, userId])
  @@index([userId])
}

model Submission {
  id            String   @id @default(uuid())
  assignmentId  String
  submittedById String
  textResponse  String?
  notes         Json?
  status        SubmissionStatus @default(SUBMITTED)
  submittedAt   DateTime @default(now())
  studioId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  submittedBy   User       @relation(fields: [submittedById], references: [id])
  grade         Grade?
  attachments   SubmissionAttachment[]
  recordings    Recording[]
  studio        Studio     @relation(fields: [studioId], references: [id])

  @@index([assignmentId])
  @@index([studioId])
}

model SubmissionAttachment {
  id           String   @id @default(uuid())
  submissionId String
  fileName     String
  mimeType     String
  size         Int
  storageKey   String
  url          String
  createdAt    DateTime @default(now())
  submission   Submission @relation(fields: [submissionId], references: [id])

  @@index([submissionId])
}

model Rubric {
  id          String    @id @default(uuid())
  studioId    String
  title       String
  criteria    Json
  gradingType GradeType @default(NUMERIC)
  commentBank Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  studio      Studio    @relation(fields: [studioId], references: [id])
  templates   AssignmentTemplate[]
  assignments Assignment[]
  grades      Grade[]

  @@index([studioId])
}

model Grade {
  id           String      @id @default(uuid())
  submissionId String      @unique
  gradedById   String
  score        Float?
  result       GradeResult?
  feedback     String?
  studioId     String
  rubricId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  submission   Submission @relation(fields: [submissionId], references: [id])
  gradedBy     User       @relation("GradeGradedBy", fields: [gradedById], references: [id])
  studio       Studio     @relation(fields: [studioId], references: [id])
  rubric       Rubric?    @relation(fields: [rubricId], references: [id])

  @@index([studioId])
  @@index([gradedById])
}

model PracticeGoal {
  id                  String   @id @default(uuid())
  studioId            String
  studentId           String
  title               String
  description         String?
  weeklyTargetMinutes Int
  startDate           DateTime
  endDate             DateTime?
  vacationRanges      Json     @default("[]")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  studio              Studio   @relation(fields: [studioId], references: [id])
  student             User     @relation(fields: [studentId], references: [id])
  practiceLogs        PracticeLog[]
  pieceTargets        PracticeGoalPieceTarget[]

  @@index([studioId])
  @@index([studentId])
}

model PracticeGoalPieceTarget {
  id              String @id @default(uuid())
  practiceGoalId  String
  pieceId         String
  targetMinutes   Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  practiceGoal    PracticeGoal @relation(fields: [practiceGoalId], references: [id])
  piece           Piece        @relation(fields: [pieceId], references: [id])

  @@unique([practiceGoalId, pieceId])
  @@index([pieceId])
}

model Piece {
  id        String   @id @default(uuid())
  studioId  String
  title     String
  composer  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  practiceLogs PracticeLog[]
  annotations Annotation[]
  practiceGoalTargets PracticeGoalPieceTarget[]

  @@index([studioId])
  @@unique([studioId, title])
}

model PracticeLog {
  id              String   @id @default(uuid())
  studioId        String
  studentId       String
  pieceId         String?
  instrumentId    String?
  practiceGoalId  String?
  assignmentId    String?
  category        PracticeCategory @default(REPERTOIRE)
  durationMinutes Int              @default(0)
  notes           String?
  practicedAt     DateTime         @default(now())
  startedAt       DateTime         @default(now())
  endedAt         DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  studio          Studio           @relation(fields: [studioId], references: [id])
  student         User             @relation(fields: [studentId], references: [id])
  piece           Piece?           @relation(fields: [pieceId], references: [id])
  instrument      Instrument?      @relation(fields: [instrumentId], references: [id])
  practiceGoal    PracticeGoal?    @relation(fields: [practiceGoalId], references: [id])
  assignment      Assignment?      @relation(fields: [assignmentId], references: [id])
  recordings      Recording[]
  annotations     Annotation[]

  @@index([studioId])
  @@index([studentId])
  @@index([assignmentId])
}

model Annotation {
  id           String   @id @default(uuid())
  studioId     String
  assignmentId String?
  practiceLogId String?
  pieceId      String?
  authorId     String?
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studio       Studio   @relation(fields: [studioId], references: [id])
  assignment   Assignment?  @relation(fields: [assignmentId], references: [id])
  practiceLog  PracticeLog? @relation(fields: [practiceLogId], references: [id])
  piece        Piece?       @relation(fields: [pieceId], references: [id])
  author       User?        @relation("AnnotationAuthor", fields: [authorId], references: [id])

  @@index([studioId])
}

model Recording {
  id            String   @id @default(uuid())
  studioId      String
  practiceLogId String?
  submissionId  String?
  url           String
  transcript    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  studio        Studio      @relation(fields: [studioId], references: [id])
  practiceLog   PracticeLog? @relation(fields: [practiceLogId], references: [id])
  submission    Submission?  @relation(fields: [submissionId], references: [id])

  @@index([studioId])
}

model CalendarConnection {
  id            String   @id @default(uuid())
  studioId      String
  userId        String
  provider      CalendarProvider
  externalId    String
  accessToken   String
  refreshToken  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  studio        Studio   @relation(fields: [studioId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
  @@index([studioId])
}

model VideoSession {
  id         String   @id @default(uuid())
  studioId   String
  lessonId   String?
  status     String   @default("scheduled")
  joinUrl    String
  startedAt  DateTime?
  endedAt    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  studio     Studio   @relation(fields: [studioId], references: [id])
  lesson     Lesson?  @relation(fields: [lessonId], references: [id])

  @@index([studioId])
}

model Notification {
  id        String   @id @default(uuid())
  studioId  String
  userId    String
  type      String
  template  NotificationTemplateType?
  payload   Json
  readAt    DateTime?
  createdAt DateTime @default(now())
  studio    Studio   @relation(fields: [studioId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([studioId])
  @@index([userId, readAt])
}

model NotificationPreference {
  id        String                 @id @default(uuid())
  studioId  String
  userId    String
  template  NotificationTemplateType
  channel   NotificationChannel
  enabled   Boolean                @default(true)
  locale    String?
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  studio    Studio                 @relation(fields: [studioId], references: [id])
  user      User                   @relation(fields: [userId], references: [id])

  @@unique([studioId, userId, template, channel])
  @@index([studioId, userId])
}

model NotificationSubscription {
  id        String               @id @default(uuid())
  studioId  String
  userId    String
  channel   NotificationChannel
  endpoint  String
  provider  String?
  metadata  Json?
  locale    String?
  active    Boolean              @default(true)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  studio    Studio               @relation(fields: [studioId], references: [id])
  user      User                 @relation(fields: [userId], references: [id])

  @@unique([studioId, userId, channel, endpoint])
  @@index([studioId, userId, channel])
}

model NotificationJob {
  id        String                   @id @default(uuid())
  studioId  String
  userId    String
  template  NotificationTemplateType
  channel   NotificationChannel?
  runAt     DateTime
  payload   Json
  status    NotificationJobStatus    @default(PENDING)
  attempts  Int                      @default(0)
  lastError String?
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  studio    Studio                   @relation(fields: [studioId], references: [id])
  user      User                     @relation(fields: [userId], references: [id])

  @@index([studioId, runAt])
  @@index([studioId, status])
  @@index([studioId, userId])
}

model Consent {
  id        String   @id @default(uuid())
  studioId  String
  subjectId String
  grantedById String?
  type      String
  grantedAt DateTime
  revokedAt DateTime?
  metadata  Json?
  guardianRelationship String?
  createdAt DateTime @default(now())
  studio    Studio   @relation(fields: [studioId], references: [id])
  subject   User     @relation("ConsentSubject", fields: [subjectId], references: [id])
  grantedBy User?    @relation("ConsentGrantedBy", fields: [grantedById], references: [id])

  @@unique([studioId, subjectId, type])
  @@index([studioId])
  @@index([grantedById])
}

model AuditLog {
  id         String   @id @default(uuid())
  studioId   String
  actorId    String?
  action     String
  entity     String
  entityId   String?
  delta      Json?
  context    Json?
  createdAt  DateTime @default(now())
  studio     Studio   @relation(fields: [studioId], references: [id])
  actor      User?    @relation("AuditActor", fields: [actorId], references: [id])

  @@index([studioId])
  @@index([actorId])
}

enum DataRequestType {
  EXPORT
  DELETE
}

enum DataRequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

model DataRequest {
  id            String            @id @default(uuid())
  studioId      String
  subjectId     String
  requestedById String
  type          DataRequestType
  status        DataRequestStatus @default(PENDING)
  reason        String?
  payload       Json?
  resultUrl     String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  processedAt   DateTime?
  studio        Studio            @relation(fields: [studioId], references: [id])
  subject       User              @relation("DataRequestSubject", fields: [subjectId], references: [id])
  requestedBy   User              @relation("DataRequestActor", fields: [requestedById], references: [id])

  @@index([studioId])
  @@index([subjectId])
  @@index([requestedById])
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  priceCents  Int
  billingInterval String
  features    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String   @id @default(uuid())
  studioId    String
  planId      String
  status      SubscriptionStatus @default(ACTIVE)
  startedAt   DateTime @default(now())
  endsAt      DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studio      Studio   @relation(fields: [studioId], references: [id])
  plan        Plan     @relation(fields: [planId], references: [id])
  invoices    Invoice[]

  @@index([studioId])
}

model Invoice {
  id             String   @id @default(uuid())
  studioId       String
  subscriptionId String
  amountCents    Int
  status         InvoiceStatus @default(DRAFT)
  issuedAt       DateTime @default(now())
  dueAt          DateTime?
  paidAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  studio         Studio   @relation(fields: [studioId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([studioId])
}

model PaymentMethod {
  id        String   @id @default(uuid())
  studioId  String
  userId    String?
  type      PaymentMethodType
  brand     String?
  last4     String?
  expMonth  Int?
  expYear   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([studioId])
}

model Coupon {
  id          String   @id @default(uuid())
  studioId    String
  code        String
  description String?
  discountType DiscountType
  amountOffCents Int?
  percentOff  Float?
  active      Boolean @default(true)
  validFrom   DateTime?
  validUntil  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studio      Studio   @relation(fields: [studioId], references: [id])

  @@unique([studioId, code])
  @@index([studioId])
}

/// Seed script should populate demo data with weekly recurring lessons and practice logs.
